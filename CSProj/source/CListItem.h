/***********************************************************************/
/*! @file  CListItem.h
 *  @brief リスト要素
 *  
 *  @author 
 *  @date 
 */
/***********************************************************************/
#ifndef ___CLIST___
#define ___CLIST___	///<	インクルードガード

/***********************************************************************/
//	インクルード
/***********************************************************************/
#include"common.h"

/***********************************************************************/
/*! @class CListItem
 *	@brift リストの要素
 */
/***********************************************************************/
template<class T>
class CListItem
{
public:
	CListItem(T Inst);
	virtual ~CListItem();

	T getInst();

	CListItem<T>* next();
	CListItem<T>* prev();

	void setNext(CListItem<T>*);
	void setPrev(CListItem<T>*);


private:
	T _Inst;			///<	要素が持つオブジェクト
	CListItem<T>* _pNext;	///<	次の要素
	CListItem<T>* _pPrev;	///<	前の要素
};


template<class T>
/***********************************************************************/
/*! @brief コンストラクタ
 * 
 *  @param[in] pInst 管理するオブジェクト
 */
/***********************************************************************/
CListItem<T>::CListItem(T Inst)
	:_Inst(Inst),
	_pNext(NULL),
	_pPrev(NULL)
{
}


template<class T>
/***********************************************************************/
/*! @brief デストラクタ
 */
/***********************************************************************/
CListItem<T>::~CListItem()
{
}

template<class T>
/***********************************************************************/
/*! @brief オブジェクト取得
 * 
 *  @retval T*	オブジェクト
 */
/***********************************************************************/
T CListItem<T>::getInst()
{
	return _Inst;
}

template<class T>
/***********************************************************************/
/*! @brief 次の要素の取得
 * 
 *  @retval void
 */
/***********************************************************************/
CListItem<T>* CListItem<T>::next()
{
	return _pNext;
}

template<class T>
/***********************************************************************/
/*! @brief 前の要素の取得
 * 
 *  @retval void
 */
/***********************************************************************/
CListItem<T>* CListItem<T>::prev()
{
	return _pPrev;
}




template<class T>
/***********************************************************************/
/*! @brief 次の要素を設定
 * 
 *  @retval void
 */
/***********************************************************************/
void CListItem<T>::setNext(CListItem<T>* pNext)
{
	_pNext = pNext;
}

template<class T>
/***********************************************************************/
/*! @brief 前の要素を設定
 * 
 *  @retval void
 */
/***********************************************************************/
void CListItem<T>::setPrev(CListItem<T>* pPrev)
{
	_pPrev = pPrev;
}



#endif