/***********************************************************************/
/*! @file  CCamera.cpp
 *  @brief カメラクラス
 *  
 *  @author 川原　佑介
 *  @date 
 */
/***********************************************************************/
/***********************************************************************/
//	インクルード
/***********************************************************************/
#include"CCamera.h"


D3DXVECTOR3		CCamera::_vec3Eye;		//!<	カメラ座標
D3DXVECTOR3		CCamera::_vec3At;		//!<	注視点
D3DXVECTOR3		CCamera::_vec3Up;		//!<	アップベクトル
D3DXMATRIXA16	CCamera::_matView;		//!<	ビューマトリクス
D3DXMATRIXA16	CCamera::_matPose;		//!<	姿勢マトリクス
bool			CCamera::_bUpdateFlg;	//!<	更新フラグ
float			CCamera::_fZOffset;		//!<	カメラの奥行きのオフセット
float			CCamera::_fZRotDef;		//!<	カメラＺ軸での回転差分
float			CCamera::_fAngle;		//!<	移動時回転単位

/***********************************************************************/
/*! @brief デフォルトコンストラクタ
 */
/***********************************************************************/
CCamera::CCamera()
{
	init();
}

/***********************************************************************/
/*! @brief 
 * 
 *  @param[in,out] constCCamera& 
 *  @retval  
 */
/***********************************************************************/
CCamera::CCamera(const CCamera&)
{
}


/***********************************************************************/
/*! @brief 
 * 
 *  @retval  
 */
/***********************************************************************/
CCamera::~CCamera()
{
}

/***********************************************************************/
/*! @brief 初期化処理
 * 
 *  @retval void
 */
/***********************************************************************/
void CCamera::init()
{
	_fZOffset = 0.0f;
	_vec3Eye = D3DXVECTOR3(0.0f,0.0f,-10.0f);
	_vec3At  = D3DXVECTOR3(0.0f,0.0f,0.0f);
	_vec3Up  = D3DXVECTOR3(0.0f,1.0f,0.0f);
	D3DXMatrixIdentity(&_matView);	//ビューマトリクスの初期化
	D3DXMatrixIdentity(&_matPose);	//姿勢の初期化
	_bUpdateFlg = true;
	update();
}


/***********************************************************************/
/*! @brief 更新処理
 * 
 *  @retval void
 */
/***********************************************************************/
void CCamera::update()
{
	D3DXMatrixLookAtLH(
		&_matView,
		&_vec3Eye,		//視点
		&_vec3At,		//注視点
		&_vec3Up		//アップベクトル
		);
}


/***********************************************************************/
/*! @brief ビューマトリクス取得
 * 
 *  @retval const D3DXMATRIXA16* 
 */
/***********************************************************************/
const D3DXMATRIXA16* CCamera::getMatView()
{
	return &_matView;
}


/***********************************************************************/
/*! @brief X指定
 * 
 *  @param[in] fX x座標
 *  @retval void
 */
/***********************************************************************/
void CCamera::setEyeX(const float fX)
{
	_vec3Eye.x = fX;
}


/***********************************************************************/
/*! @brief y座標指定
 * 
 *  @param[in] fY y座標
 *  @retval void
 */
/***********************************************************************/
void CCamera::setEyeY(const float fY)
{
	_vec3Eye.y = fY;
}


/***********************************************************************/
/*! @brief z座標指定
 * 
 *  @param[in] fZ z座標
 *  @retval void
 */
/***********************************************************************/
void CCamera::setEyeZ(const float fZ)
{
	_vec3Eye.z = fZ;
}


/***********************************************************************/
/*! @brief 視点座標設定
 * 
 *  @param[in] Eye 視点座標
 *  @retval void
 */
/***********************************************************************/
void CCamera::setEye(D3DXVECTOR3& Eye)
{
	_vec3Eye = Eye;
}


/***********************************************************************/
/*! @brief 注視点座標設定
 * 
 *  @param[in] vec3At 注視点座標
 *  @retval void
 */
/***********************************************************************/
void CCamera::setAt(D3DXVECTOR3& vec3At)
{
	_vec3At = vec3At;
}


/***********************************************************************/
/*! @brief アップベクトル設定
 * 
 *  @param[in] vec3Up アップベクトル
 *  @retval void
 */
/***********************************************************************/
void CCamera::setUp(D3DXVECTOR3& vec3Up)
{
	_vec3Up = vec3Up;
}


/***********************************************************************/
/*! @brief 視点座標取得
 * 
 *  @retval D3DXVECTOR3& 視点座標
 */
/***********************************************************************/
D3DXVECTOR3& CCamera::getEye()
{
	return _vec3Eye;
}


/***********************************************************************/
/*! @brief 注視点座標取得
 * 
 *  @retval D3DXVECTOR3& 注視点座標 
 */
/***********************************************************************/
D3DXVECTOR3& CCamera::getAt()
{
	return _vec3At;
}

/***********************************************************************/
/*! @brief アップベクトル取得
 * 
 *  @retval D3DXVECTOR3& アップべ苦闘
 */
/***********************************************************************/
D3DXVECTOR3& CCamera::getUp()
{	
	return _vec3Up;
}


/***********************************************************************/
/*! @brief 座標マトリクス取得
 * 
 *  @retval D3DXMATRIXA16& 座標マトリクス
 */
/***********************************************************************/
D3DXMATRIXA16& CCamera::position()
{
	D3DXMATRIXA16 mat;
	D3DXMatrixIdentity(&mat);
	mat._41 = _vec3Eye.x;
	mat._42 = _vec3Eye.y;
	mat._43 = _vec3Eye.z;
	return mat;
}

//EOF