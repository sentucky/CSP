/***********************************************************************/
/*! @file  CSingleton.h
 *  @brief
 *  
 *  @author 
 *  @date 
 */
/***********************************************************************/
/***********************************************************************/
//	インクルードガード
/***********************************************************************/
#ifndef ___CSINGLETON_HEADER___
#define ___CSINGLETON_HEADER___

/***********************************************************************/
//	インクルード
/***********************************************************************/

/***********************************************************************/
//	マクロ定義
/***********************************************************************/

/***********************************************************************/
//	列挙定義
/***********************************************************************/

/***********************************************************************/
//	クラス定義
/***********************************************************************/
template<class T>
class CSingleton
{
private:
	/***********************************************************************/
	/*! @class CSingletonAuto
	 *  @brief コンストラクタ
	 * 
	 */
	/***********************************************************************/
	class CSingletonAuto
	{
	public:
		T* _pInst;
		/***********************************************************************/
		/*! @brief 
		 * 
		 *  @retval  
		 */
		/***********************************************************************/
		CSingletonAuto():_pInst(0){}
		/***********************************************************************/
		/*! @brief 
		 * 
		 *  @retval virtual 
		 */
		/***********************************************************************/
		virtual ~CSingletonAuto()
		{
			deleteInst();
		}
		/***********************************************************************/
		/*! @brief 
		 * 
		 *  @retval void
		 */
		/***********************************************************************/
		void deleteInst()
		{
			if(_pInst)
			{
				delete _pInst;
				_pInst = 0;
			}
		}
	};

	static typename CSingleton<T>::CSingletonAuto _Auto;
public:
	/***********************************************************************/
	/*! @brief 
	 * 
	 *  @retval T* 
	 */
	/***********************************************************************/
	static T* getInst()
	{
		if( 0 == _Auto._pInst)
		{

			_Auto._pInst = new T;
		}
		return _Auto._pInst;
	}
};

template<class T>
typename CSingleton<T>::CSingletonAuto CSingleton<T>::_Auto;	///<静的メンバ初期化

#endif