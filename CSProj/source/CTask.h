/***********************************************************************/
/*! @file  CTask.h
 *  @brief タスククラス
 *  
 *  @author 川原　佑介
 *  @date
 */
/***********************************************************************/
#ifndef ___CTASK___
#define ___CTASK___	///<	インクルードガード

/***********************************************************************/
//	インクルード
/***********************************************************************/
#include"CTaskBase.h"

/***********************************************************************/
/*! @class  CTask
 *  @brief タスククラス
 */
/***********************************************************************/
template<class T>
class CTask:public CTaskBase
{
public:
	CTask(
		const uint unTaskID,
		T* pInst,
		void (T::*func)()
		);					///<	コンストラクタ
	~CTask();				///<	デストラクタ
	void run();				///<	処理関数実行

private:
	T*				_pInst;			///<	インスタンス
	void			(T::*_func)();	///<	メンバ関数ポインタ
};



/***********************************************************************/
/*! @brief コンストラクタ
 * 
 *  @param[in] unTaskID タスク番号
 *  @param[in] pInst 	処理関数を持つインスタンス
 *  @param[in] func 	メンバ関数ポインタ
 */
/***********************************************************************/
template<class T>
CTask<T>::CTask(
		const	uint	unTaskID,
				T*		pInst,
				void	(T::*func)()
	):CTaskBase(unTaskID),
	_pInst(pInst),
	_func(func)
{
}



/***********************************************************************/
/*! @brief デストラクタ
 */
/***********************************************************************/
template<class T>
CTask<T>::~CTask()
{
}



/***********************************************************************/
/*! @brief 処理関数
 * 
 *  @retval void
 */
/***********************************************************************/
template<class T>
void CTask<T>::run()
{
	(_pInst->*_func)();
}

#endif